// 0x2A764-ii | Deadlands Forest Shrine II
/*The truth of culture is that it spreads and evolves freely.
Released into the Public Domain / CC0. Free to access, study, remix and reuse.
Attribution is appreciated, but not required.*/

(
// Clock
~tempo = 65;
~bar = 60/~tempo;
~beat = ~bar/4;
TempoClock.default.tempo = ~tempo / 60;

~bus_fm_mod = Bus.control(s,1);

//Modulation Bus
SynthDef(\busFMAug, {
	Out.kr(~bus_fm_mod, SinOsc.kr(0.25/4,phase: 0.25,mul: 0.5,add: 0.5));
}).add;

SynthDef(\et4, { | carFreq = 300, modFreqRatio = 2.0, modDepth = 100.0, noteLength = 1.0, amp = 0.5,
	macro1 = 5, macro2 = 5, macro3 = 5 |
	var audio, carrier, modulator, transient, m1, m2, m3;

	//Macros
	m1 = macro1 * 0.1;
	m2 = macro2 * 0.1;
	m3 = macro3 * 0.1;
	amp = amp * 0.1;

	//Assigning macros (base + (macro * range))
	modFreqRatio = 0.5 + (m1 * (6.0));
	modDepth = 0 + (m1 * (800 + (In.kr(~bus_fm_mod)*200)) );

	noteLength = 0.01 + (m2 * 2.5);

	// Main
	modulator = SinOsc.ar(carFreq * modFreqRatio);
	carrier = SinOsc.ar((carFreq + [-1, 0, 1]) + (modulator * modDepth));

	audio = carrier * EnvGen.ar(Env.perc(
		attackTime: 0.01,
		releaseTime: noteLength,
		level: 1.0,
		curve: -4.0
	),
	doneAction: 2
	);

	// Transient
	transient = SinOsc.ar(((carFreq + [-1, 0, 1]) * 3) + (modulator * modDepth), mul: 0.1) * EnvGen.ar(Env.perc(0.01,noteLength * 0.2), doneAction: 0);

	audio = audio + transient;

	audio = Splay.ar(audio,
		spread: 1,
		level: 1,
		center: \pan.kr(0.0),
		levelComp: true
	);

	audio = audio + FreeVerb.ar(audio,
		mix: 0.5,
		room: 1.2,
		damp: 0.1,
		mul: 1.0,
		add: 0.0
	);

	audio = LPF.ar(audio, 1200 + (In.kr(~bus_fm_mod)*10800));

	audio = Compander.ar(audio,
		control: audio,
		thresh: 0.8,
		mul: amp * 0.5
	);


	Out.ar(0, audio);

}).add;

SynthDef(\et5, { | carFreq = 300, modFreqRatio = 2.0, modDepth = 100.0, noteLength = 1.0, amp = 0.5,
	macro1 = 5, macro2 = 5, macro3 = 5 |
	var audio, carrier, modulator, transient, m1, m2, m3, chorus;

	//Macros
	m1 = macro1 * 0.1;
	m2 = macro2 * 0.1;
	m3 = macro3 * 0.1;
	amp = amp * 0.1;

	//Assigning macros (base + (macro * range))
	modFreqRatio = 1.0 + (m1 * 1.0);
	modDepth = 0 + (m1 * 200);
	chorus = 20 * m1;

	// Main
	modulator = SinOsc.ar(carFreq * modFreqRatio);
	carrier = SinOsc.ar(carFreq + (modulator * modDepth) +
		[chorus * -1, chorus * -0.5, 0, chorus * 0.5, chorus]);

	audio = carrier * EnvGen.ar(Env.perc(
		attackTime: m2 * 4,
		releaseTime: m3 * 4,
		level: 1.0,
		curve: -4.0
	),
	doneAction: 2
	);

	audio = Splay.ar(audio,
		spread: 1,
		level: amp,
		center: 0.0,
		levelComp: true
	);

	Out.ar(0, audio);

}).add;

//Scale Setup
~rootNote = 64;
~noteList = [0,1,3,5,7,9] + ~rootNote;

~compLine1_trans = 0; //Transposition in MIDI notes
~compLine2_trans = -12;
~compLine3_trans = 0;

// Composition /////////////////////////////////////////////////////////////////////////////////////////////////
//Note, FM Macro, NoteLength Macro, Amp
~compLine1 = [

	[0, 5, 7, 6],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[0, 5, 7, 6],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[1, 5, 7, 4],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[3, 5, 7, 5],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[3, 5, 7, 4],
	\r,
	[4, 2, 7, 4],
	\r,
	[3, 5, 7, 5],
	\r,
	[3, 2, 7, 4],
	\r,

	[1, 6, 0.5, 3],
	[2, 6, 0.5, 1],
	[4, 8, 0.5, 2],
	[5, 9, 0.5, 1],
	[3, 2, 1, 3],
	[4, 3, 2, 1],
	[3, 4, 3, 4],
	[5, 5, 4, 1],

	[0, 5, 7, 6],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[0, 5, 7, 6],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[1, 5, 7, 4],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[3, 5, 7, 5],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[3, 5, 7, 4],
	\r,
	[4, 2, 7, 4],
	\r,
	[3, 5, 7, 5],
	\r,
	[3, 2, 7, 4],
	\r,

	[1, 6, 0.5, 3],
	[2, 6, 0.5, 1],
	[4, 8, 0.5, 2],
	[5, 9, 0.5, 1],
	[3, 2, 1, 3],
	[4, 3, 2, 1],
	[3, 4, 3, 4],
	[5, 5, 4, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 5, 7, 6],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[0, 5, 7, 6],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[1, 5, 7, 4],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[3, 5, 7, 5],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[3, 5, 7, 4],
	\r,
	[4, 2, 7, 4],
	\r,
	[3, 5, 7, 5],
	\r,
	[3, 2, 7, 4],
	\r,

	[1, 6, 0.5, 3],
	[2, 6, 0.5, 1],
	[4, 8, 0.5, 2],
	[5, 9, 0.5, 1],
	[3, 2, 1, 3],
	[4, 3, 2, 1],
	[3, 4, 3, 4],
	[5, 5, 4, 1],

	[0, 5, 7, 6],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[0, 5, 7, 6],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[1, 5, 7, 4],
	[2, 1, 2, 1],
	[4, 2, 7, 4],
	[5, 3, 2, 1],
	[3, 5, 7, 5],
	[4, 1, 2, 1],
	[3, 2, 7, 4],
	[5, 1, 1, 1],

	[3, 5, 7, 4],
	\r,
	[4, 2, 7, 4],
	\r,
	[3, 5, 7, 5],
	\r,
	[3, 2, 7, 4],
	\r,

	[1, 6, 0.5, 3],
	[2, 6, 0.5, 1],
	[4, 8, 0.5, 2],
	[5, 9, 0.5, 1],
	[3, 2, 1, 3],
	[4, 3, 2, 1],
	[3, 4, 3, 4],
	[5, 5, 4, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 5, 4, 3],
	[0, 2, 2, 1],
	[2, 3, 1, 3],
	[0, 2, 2, 1],
	[4, 7, 2, 3],
	[4, 2, 2, 1],
	[0, 4, 1, 3],
	[5, 2, 2, 1],

	[2, 5, 4, 3],
	[4, 2, 2, 1],
	[5, 3, 1, 3],
	[2, 2, 2, 1],
	[3, 7, 2, 3],
	[2, 2, 2, 1],
	[1, 4, 1, 3],
	[5, 2, 2, 1],

	[0, 1, 20, 7],
	\r,
	[2, 1, 2, 2],
	\r,
	[2, 1, 2, 1],
	\r,
	[2, 1, 2, 1],
	\r,

	[0, 2, 20, 7],
	\r,
	[2, 1, 2, 1],
	\r,
	[2, 1, 2, 1],
	\r,
	[2, 2, 20, 5],
	\r,

	[0, 3, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3.2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 1, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3.2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	[2, 2, 20, 5],
	\r,

	[0, 1.5, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[2, 1, 1, 1],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 1, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3.2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 1, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3.2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 3, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[0, 2, 20, 7],
	\r,
	\r,
	\r,
	\r,
	\r,
	[2, 2, 20, 5],
	\r,

	[0, 1.5, 20, 7],
	\r,
	[2, 1, 1, 1],
	\r,
	[2, 1, 1, 1],
	\r,
	[2, 1, 1, 1],
	\r,

	[2, 1, 1, 1],
	\r,
	[2, 1, 1, 1],
	\r,
	[2, 1, 1, 3],
	[2, 3, 1, 3],
	[2, 5, 1, 3],
	[2, 6, 1, 3],
];

~compLine2 = [
	//Note, FM Macro, NoteLength Macro, Amp
	//1
	[0, 1, 20, 2],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[2, 2, 10, 3],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	[2, 2, 10, 3],
	\r,
	\r,
	\r,

	[0, 3, 20, 3],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[2, 1, 10, 2],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	[2, 5, 10, 3],
	\r,
	[2, 6, 10, 3],
	\r,

	[0, 1, 20, 3],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[2, 2, 10, 2],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	[2, 2, 10, 3],
	\r,
	\r,
	\r,

	[0, 3, 20, 3],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	[2, 4, 10, 3],
	\r,
	\r,
	\r,

	[0, 1, 10, 3],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	[2, 5, 5, 2],
	\r,
	[2, 6, 5, 2],
	\r,

];

~compLine3 = [
	//Note, FM Macro, Attack Macro, NoteLength Macro, Amp
	[0, 5, 2, 4, 2],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	[2, 10, 2, 4, 2],
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,
	\r,

];

)